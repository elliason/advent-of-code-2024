{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    /* -- Basics -- */
    /** Helps mend a few of the fences between CommonJS and ES Modules. */
    "esModuleInterop": true,
    /** Skips checking the types of .d.ts files. This is important for performance, because otherwise all node_modules will be checked. */
    "skipLibCheck": true,
    /** The version of JavaScript you're targeting. */
    "target": "es2022",
    /** Allows for the use of JavaScript files. */
    "allowJs": true,
    /** Allows for the use of .json files. */
    "resolveJsonModule": true,
    /** This option forces TypeScript to consider all files as modules. This helps to avoid 'cannot redeclare block-scoped variable' errors. */
    "moduleDetection": "force",
    /** This option prevents a few TS features which are unsafe when treating modules as isolated files. */
    "isolatedModules": true,
    /** This option forces you to use import type and export type, leading to more predictable behavior and fewer unnecessary imports.
     * With module: NodeNext, it also enforces you're using the correct import syntax for ESM or CJS. */
    "verbatimModuleSyntax": true,
    /** Tells TypeScript what module syntax to use. */
    /** Tells TypeScript what built-in types to include. es2022 is the best option for stability. */
    "lib": ["es2023"],
    "exactOptionalPropertyTypes": true,
    "module": "esnext",
    "moduleResolution": "bundler",

    /* -- Strictness & Linting -- */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noUncheckedIndexedAccess": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitThis": true,
    "noImplicitAny": true,
    "noImplicitOverride": true,
    "allowArbitraryExtensions": true
  }
}
